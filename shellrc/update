#!/usr/bin/env bash
greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
yellowColour="\e[0;33m\033[1m"
update() {
  NODEJS_VERSION=$(nvm current)
  (
    cd "$NVM_DIR"
    git fetch --tags origin
    git checkout $(git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1))
  ) && \. "$NVM_DIR/nvm.sh"
  echo -e "${greenColour}Checking for possible nodejs updates...${endColour}"
  if [ ! "$(nvm ls-remote --no-colors | tail -n1 | awk '{print $2}')" = "$(nvm current)" ]; then
    echo -e "${yellowColour}Nodejs update found${endColour}"
    nvm install node
    nvm reinstall-packages "$NODEJS_VERSION"
  fi

  if [[ $(which nvim) = "/usr/local/bin/nvim" ]]; then
    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    if [ ! "$(md5sum /opt/nvim.appimage | awk '{print $1}')" = "$(md5sum "$HOME/nvim.appimage" | awk '{print $1}')" ]; then
      echo -e "${yellowColour}Neovim update found!${endColour}"
      chmod u+x nvim.appimage
      sudo rm /opt/nvim.appimage
      sudo mv "$HOME/nvim.appimage" /opt/
    else
      echo "Nothing to do."
      rm nvim.appimage
    fi
  fi

  if [ -d "$HOME/.cargo" ]; then
    echo -e "${greenColour}Updating rust...${endColour}"
    rustup update
    ## The construction process can take a long time dependColouring on the capacity of the machine.
    ## It is convenient to ask before doing this action.
    while true; do
      echo -ne "${yellowColour}Update installed binaries by cargo? (y/n) -> ${endColour}" && read -r opt
      if [ "$(echo "$opt" | awk '{print tolower($0)}')" = "y" ]; then
        for bin in $(cargo install --list | awk '/^ / {print}' | tr -d ' '); do
          cargo install "$bin" --force
        done
        break
      elif [ "$(echo "$opt" | awk '{print tolower($0)}')" = "n" ]; then
        break
      fi
    done
  fi

  if [ "$(
    which nala &>/dev/null
    echo $?
  )" -eq 0 ]; then
    echo -e "${greenColour}Updating OS...${endColour}"
    sudo nala update && sudo nala upgrade -y
    sudo nala autoremove -y
    echo -e "${greenColour}Checking for snap package updates if they exist...${endColour}"
    [[ -d /snap ]] && sudo snap refresh
  elif [ "$(
    which dnf &>/dev/null
    echo $?
  )" -eq 0 ]; then
    echo -e "${greenColour}Updating OS...${endColour}"
    sudo dnf -y upgrade-minimal
    sudo dnf -y autoremove
  fi

  OHMZ="$HOME/.ohmyzsh"
  if [[ -d $OHMZ ]]; then
    cd "$OHMZ" || return 1
    echo -e "${greenColour}Checking for updates to oh my zsh framework...${endColour}"
    git pull --rebase
    cd || return 1
  fi

  BASHIT="$HOME/.bash_it"
  if [[ -d $BASHIT ]]; then
    cd "$BASHIT" || return 1
    echo -e "${greenColour}Checking for updates to bash-it framework...${endColour}"
    git pull --rebase
    cd || return 1
  fi

  P10K="$HOME/.powerlevel10k"
  if [[ -d $P10K ]]; then
    cd "$P10K" || return 1
    echo -e "${greenColour}Checking for updates to powerlevel10k...${endColour}"
    git pull --rebase
    cd || return 1
  fi

  THEME="$HOME/.dracula"
  if [[ -d $THEME ]]; then
    cd "$THEME" || return 1
    echo -e "${greenColour}Checking for updates to all dracula color schemes...${endColour}"
    for DIR in *; do
      cd "$DIR" || return 1
      git pull --rebase
      cd .. || return 1
    done
    sudo cp -r "$THEME/gtk/" /usr/share/themes/Dracula
    sudo cp -r "$THEME/dracula-icons/" /usr/share/icons/Dracula-icons
    sudo cp -r "$THEME/gtk/kde/cursors/Dracula-cursors" /usr/share/icons/

    ### if [[ -d "/boot/grub/" ]];then
    ### sudo rm -rf /boot/grub/themes/dracula
    ### sudo cp -r ~/.dracula/grub/dracula /boot/grub/themes/
    ### sudo grub-mkconfig -o /boot/grub/grub.cfg
    ### elif [[ -d "/boot/grub2/" ]]; then
    ### sudo rm -rf /boot/grub2/themes/dracula
    ### sudo cp -r ~/.dracula/grub/dracula /boot/grub2/themes/
    ### sudo grub2-mkconfig -o /boot/grub2/grub.cfg
    ### fi  
  fi

  if [[ $(which starship 2>/dev/null) = "/usr/local/bin/starship" ]]; then
    echo -e "${greenColour}Updating starship...${endColour}"
    curl -sS https://starship.rs/install.sh | sudo sh
  fi

  NERDF="$HOME/.nerd-fonts"
  if [[ -d $NERDF ]]; then
    cd "$NERDF" || return 1
    echo -e "${greenColour}Checking for updates to nerd fonts...${endColour}"
    git pull --rebase
    sudo cp -r ./patched-fonts/* /usr/share/fonts/
    cd || return 1
  fi

  ROFI_THEME="$HOME/.rofi"
  if [[ -d $ROFI_THEME ]]; then
    cd "$ROFI_THEME" || return 1
    echo -e "${greenColour}Checking for updates to rofi themes...${endColour}"
    git fetch upstream
    git merge upstram/master
    cd || return 1
  fi

}
